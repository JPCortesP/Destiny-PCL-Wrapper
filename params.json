{
  "name": "Destiny-pcl-wrapper",
  "tagline": "Yet another Destiny Client. this time for .NET",
  "body": "# DestinyPCL-Client C# Library\r\nTesting Project for a Destiny PCL API Wrapper in C#\r\n\r\nStill in development, breaking changes are expected. \r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/xvshwxf7fmjg8n53/branch/master?svg=true)](https://ci.appveyor.com/project/JPCortesP/destiny-pcl-wrapper/branch/master)\r\n\r\n## Usage\r\n\r\n```csharp\r\nDestinyService ds = new DestinyService(new DestinyPCL.Manifest.OnlineManifest(), \"YOUR API KEY\");\r\nvar Player = await ds.getPlayerAsync(new DestinyPCL.Objects.BungieUser(\"GamerTag / PSN ID\", DestinyPCL.Objects.DestinyMembershipType.Xbox));\r\nforeach (var character in Player.Characters)\r\n{\r\n    Console.WriteLine(\"{0} - {1}\", character.Class, character.LightLevel);\r\n}\r\n```\r\n### Destiny Manifest\r\nDestiny API uses an obscure way to get item, activity, gear, stats, (long etc) definitions. This Repo contains:\r\n- OnlineManifest, to query directly the API. SUPER SLOW. \r\n- OfflineManifest, deprecated, as uses raw JSON files obtained from https://github.com/nmlorg/destiny-db expected to be directly embeded in the Library. It is currently\r\nnot being used, nor the json files are embeded, but it stays in the repo just for the lolz\r\n- Win32Manifest in a different project (currently trying to AppVeyor to build the nugget package) that runs only on Win32 (WPF, Console, ...) that directly downloads the manifest' SQLite database and queries.\r\nOffcourse, it depends on System.Data.Sqlite nuget package. \r\n- An Interface, so you can build your own and just provide it to the Client. The client will fill the APIKey in case you need it. You're responsible to call Preload();\r\n\r\nMore information is being writen as we speak, and should be available in the Wiki soon. \r\n### Authenticated Request.\r\nFor any Auth Request, you must capture yourself the Cookies. For it, there's some help in DestinyPCL.AuthHelpers:\r\n```csharp\r\n//Get the PSN Login URL\r\npublic static readonly string PSNLoginUrl\r\n//Get the Xbox Login URL\r\npublic static readonly string XboxLoginUrl;\r\n//Array of all the Required Cookie Names to be in the Coockie Container\r\npublic static readonly string[] RequiredCookieNames;\r\n\r\n//Wanna Check if your CookieContainer has what it takes? use this function. \r\npublic static bool CheckForRequiredCookies(CookieContainer cookies);\r\n```\r\nthen use that Cookie Container inside a new (or existent) BungieUser object and call the APIs.\r\n\r\nThere's some examples in the Repo or in the Wiki. Check them out. \r\n\r\n### Get an Api KEY\r\nfrom https://www.bungie.net/en/Clan/Post/39966/85087279/0/0 instructions, go to https://www.bungie.net/en/User/API. \r\n\r\n## How to get it\r\n- Currently, is available in nuget as \"DestinyPCL\" and with the default Win32 implementation of the manifest as \"DestinyPCL.Win32Manifest\". \r\nThis nugget package feed will be updated everytime a new commit is done on master. I'll try to avoid to push to master any non-working version.\r\n\r\n## Examples\r\nAn usage example is below. This snippet runs and then shows in screen by character the best gear (by attack or deffense) \r\nthat can be equipped on every character.\r\n\r\n```csharp\r\nusing DestinyPCL.Objects;\r\nusing DestinyPCL.Win32Manifest;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleTests\r\n{\r\n    class Program\r\n    {\r\n        \r\n        [STAThread]\r\n        static void Main(string[] args)\r\n        {\r\n            var LoginWindow = new DestinyWeaponExplorer.LoginWindow();\r\n            LoginWindow.ShowDialog();\r\n            var user = new BungieUser() { GamerTag = \"jpcortesp\", type = DestinyMembershipType.Xbox };\r\n            if (LoginWindow.Resultado)\r\n            {\r\n                user.cookies = LoginWindow.cookies;\r\n            }\r\n            var api = new DestinyPCL.DestinyService(new Win32Manifest(), \"6def2424db3a4a8db1cef0a2c3a7807e\");\r\n            var player = api.getPlayerAsync(user).Result;\r\n            player.BestGearbyBucket(player.Characters.First());\r\n            var ItemTypes = player.Gear.Select(g => g.itemTypeName).Distinct();\r\n            //ALL THE GEAR ORDERED AND SHOWING THE BEST OF ANY TYPE.\r\n            //=================================================================\r\n            foreach (var type in ItemTypes)\r\n            {\r\n                Console.WriteLine(\"Top {0}s\", type);\r\n                Console.WriteLine(\"=====================\");\r\n                foreach (var item in player.Gear.Where(g => g.itemTypeName == type).OrderByDescending(h => h.primaryStats_value).Take(2))\r\n                {\r\n                    Console.WriteLine(\"{0} - {1} - {2}\", item.itemName, item.primaryStats_value, item.dbData?.classType);\r\n\r\n                }\r\n                Console.WriteLine(\"{0} more {1}\", player.Gear.Where(g => g.itemTypeName == type).Count() - 2, type);\r\n                Console.WriteLine(\"\");\r\n            }\r\n\t\t\tConsole.ReadLine();\r\n            \r\n\r\n            \r\n            \r\n\r\n        }\r\n    }\r\n   \r\n}\r\n\r\n```",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}